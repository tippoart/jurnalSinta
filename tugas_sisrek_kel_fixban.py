# -*- coding: utf-8 -*-
"""Tugas_sisrek_kel fixban.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KhYvcoPJ3UBKy7J73Es23RiflZ_77HA_
"""

# pip install Sastrawi

#Kelompok fixban
# latif ardiansyah 22.12.2599
# reyhan dwi wira allofadieka 22.12.2563

import pandas as pd

jurnal_df = pd.read_excel('jurnal_sinta.xlsx')
jurnal_df.head()

jurnal_df.isnull().sum()

jurnal_df = jurnal_df[jurnal_df['judul_prosessing'].notnull()]

from sklearn.metrics.pairwise import cosine_similarity
from sklearn.feature_extraction.text import TfidfVectorizer

from Sastrawi.StopWordRemover.StopWordRemoverFactory import StopWordRemoverFactory
from  Sastrawi.Stemmer.StemmerFactory import StemmerFactory
import re
import random

clean_spcl = re.compile('[/(){}\[\]\|@,;]')
clean_symbol = re.compile('[^0-9a-z #+_]')
sastrawi = StopWordRemoverFactory()
stopwprda =sastrawi.get_stop_words()
factory = StemmerFactory()
stemmer = factory.create_stemmer()


def clean_text(text):
  text = text.lower()
  text = clean_spcl.sub(' ', text)
  text = clean_symbol.sub('', text)
  text = stemmer.stem(text)
  text = ' '.join(word for word in text.split() if word not in stopwprda)
  return text

jurnal_df['desc_clean'] = jurnal_df['judul_prosessing'].apply(clean_text)
jurnal_df.head()

jurnal_df.set_index('judul_prosessing', inplace=True)
tf = TfidfVectorizer(analyzer='word', ngram_range=(1,3), min_df=0.0,)
tfidf_matrix = tf.fit_transform(jurnal_df['desc_clean'])
cos_sim = cosine_similarity(tfidf_matrix, tfidf_matrix)
cos_sim

indices = pd.Series(jurnal_df.index)
indices[:15]

import pandas as pd

def recommendations(name, top=10):
    recommended_hotel = []



    if name not in indices.values:
        return f"Error: '{name}' not found in the indices. Available indices are: {indices.values}"

    # Get the index of the name
    idx = indices[indices == name].index[0]

    # Get the similarity scores
    score_series = pd.Series(cos_sim[idx]).sort_values(ascending=False)

    # Adjust the top value to get the correct number of recommendations
    top = top + 1
    top_indexes = list(score_series.iloc[0:top].index)

    # Create the list of recommendations
    for i in top_indexes:
        recommended_hotel.append(list(jurnal_df.index)[i] + " - " + str(score_series[i]))

    return recommended_hotel

recommendations ('teknologi', top=15)